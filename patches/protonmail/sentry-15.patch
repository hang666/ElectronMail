diff --git a/packages/shared/lib/helpers/sentry.ts b/packages/shared/lib/helpers/sentry.ts
index 503abd48a4..296afc18f4 100644
--- a/packages/shared/lib/helpers/sentry.ts
+++ b/packages/shared/lib/helpers/sentry.ts
@@ -1,15 +1,10 @@
 import {
     BrowserOptions,
     captureException,
-    configureScope,
-    init,
-    makeFetchTransport,
     captureMessage as sentryCaptureMessage,
 } from '@sentry/browser';
-import { BrowserTransportOptions } from '@sentry/browser/types/transports/types';

 import { VPN_HOSTNAME } from '../constants';
-import { ApiError } from '../fetch/ApiError';
 import { getUIDHeaders } from '../fetch/headers';
 import { ProtonConfig } from '../interfaces';

@@ -67,21 +62,6 @@ export const getContentTypeHeaders = (input: RequestInfo | URL): HeadersInit =>
     return {};
 };

-const sentryFetch = (input: RequestInfo | URL, init?: RequestInit) => {
-    return globalThis.fetch(input, {
-        ...init,
-        headers: {
-            ...init?.headers,
-            ...getContentTypeHeaders(input),
-            ...context.authHeaders,
-        },
-    });
-};
-
-const makeProtonFetchTransport = (options: BrowserTransportOptions) => {
-    return makeFetchTransport(options, sentryFetch);
-};
-
 const isLocalhost = (host: string) => host.startsWith('localhost');
 const isProduction = (host: string) => host.endsWith('.proton.me') || host === VPN_HOSTNAME;

@@ -170,86 +150,10 @@ function main({
     ignore = ({ host }) => isLocalhost(host),
     denyUrls = getDefaultDenyUrls(),
     ignoreErrors = getDefaultIgnoreErrors(),
-}: SentryOptions) {
-    const { SENTRY_DSN, APP_VERSION } = config;
-    const { host, release, environment } = sentryConfig;
-
-    // No need to configure it if we don't load the DSN
-    if (!SENTRY_DSN || ignore(sentryConfig)) {
-        return;
-    }
+}: SentryOptions) {}

-    setUID(uid);
-
-    // Assumes SENTRY_DSN is: https://111b3eeaaec34cae8e812df705690a36@sentry/11
-    // To get https://111b3eeaaec34cae8e812df705690a36@protonmail.com/api/core/v4/reports/sentry/11
-    const dsn = SENTRY_DSN.replace('sentry', `${host}/api/core/v4/reports/sentry`);
-
-    init({
-        dsn,
-        release,
-        environment,
-        normalizeDepth: 5,
-        transport: makeProtonFetchTransport,
-        autoSessionTracking: sessionTracking,
-        // Disable client reports. Client reports are used by sentry to retry events that failed to send on visibility change.
-        // Unfortunately Sentry does not use the custom transport for those, and thus fails to add the headers the API requires.
-        sendClientReports: false,
-        beforeSend(event, hint) {
-            const error = hint?.originalException as any;
-            const stack = typeof error === 'string' ? error : error?.stack;
-            // Filter out broken ferdi errors
-            if (stack && stack.match(/ferdi|franz/i)) {
-                return null;
-            }
-
-            // Not interested in uncaught API errors, or known errors
-            if (error instanceof ApiError || error?.trace === false) {
-                return null;
-            }
-
-            if (!context.enabled) {
-                return null;
-            }
-
-            // Remove the hash from the request URL and navigation breadcrumbs to avoid
-            // leaking the search parameters of encrypted searches
-            if (event.request && event.request.url) {
-                [event.request.url] = event.request.url.split('#');
-            }
-            if (event.breadcrumbs) {
-                event.breadcrumbs = event.breadcrumbs.map((breadcrumb) => {
-                    if (breadcrumb.category === 'navigation' && breadcrumb.data) {
-                        [breadcrumb.data.from] = breadcrumb.data.from.split('#');
-                        [breadcrumb.data.to] = breadcrumb.data.to.split('#');
-                    }
-                    return breadcrumb;
-                });
-            }
-
-            return event;
-        },
-        // Some ignoreErrors and denyUrls are taken from this gist: https://gist.github.com/Chocksy/e9b2cdd4afc2aadc7989762c4b8b495a
-        // This gist is suggested in the Sentry documentation: https://docs.sentry.io/clients/javascript/tips/#decluttering-sentry
-        ignoreErrors,
-        denyUrls,
-    });
-
-    configureScope((scope) => {
-        scope.setTag('appVersion', APP_VERSION);
-    });
-}
-
-export const traceError = (...args: Parameters<typeof captureException>) => {
-    if (!isLocalhost(window.location.host)) {
-        captureException(...args);
-    }
-};
+export const traceError = (...args: Parameters<typeof captureException>) => console.error(...args);

-export const captureMessage = (...args: Parameters<typeof sentryCaptureMessage>) => {
-    if (!isLocalhost(window.location.host)) {
-        sentryCaptureMessage(...args);
-    }
-};
+export const captureMessage = (...args: Parameters<typeof sentryCaptureMessage>) => console.log(...args);

 export default main;
--
